#NONE#NONE#fopen#
FILE *fopen(const char* filename, const char *mode);
Open an exist file or create a new file.
Mode can be "r","w","a","r+","w+","a+".
if you are dealing with a binary file, you need to change the mode as "rb", "wb", etc.
"r" is to open an exist file and allow to read it.
"w" is to open a file and write from the beginning of the file. If the file does not
exist, new one will be created.
"a" is to open a file and write something which will add to the file's end. If the file
does not exist, new one will be created.
"r+" is to open an exist file and allow to read and write it.
"w+" is to open a file and write from the beginning of the file, which can read the file too. If the file does not exist, new one will be created.
"a+" is to open a file and write something which will add to the file's end, it also allows to read the file from beginning. If the file does not exist, new one will be created.

#NONE#NONE#fclose#
int fclose (FILE * fp);
If you successfully close the file, this function will return 0; else it will return EOF.

#NONE#NONE#fputc#
int fputc(int num, FILE *fp)
Write the character stored in num into the file. If this write operation is successful, it will return the character you write in, else it will return EOF.

#NONE#NONE#fputs#
int fputs(const char *s, FILE *fp)
Write a string which is ended by null into the file.
If this write operation is successful, it will return a non-negative number, else it will return EOF.
For example:
FILE *fp = NULL;
fp = fpopen("test.txt", "w+");
fputs("This is testing\n", fp);
fclose(fp);

#NONE#NONE#fprintf#
int fprintf(FILE *fp, const char *format, ...)
Write a string into the file.
For example:
FILE *fp = NULL;
fp = fpopen("test.txt", "w+");
fprintf(fp, "This is testing\n");
fclose(fp);

#NONE#NONE#fgetc#
int fgetc(int num, FILE *fp)
Read the character stored in num from the file.
If this read operation is successful, it will return the character you read in, else it will return EOF.

#NONE#NONE#fgets#
int fgets(const char *s, FILE *fp)
Read a string which is ended by null, length is n-1.
If reading in a blank space or '\n' or EOF, it will stop reading and return the character it reads.
If succeed, it will return an non-negative number, otherwise, it will return EOF.

#NONE#NONE#fscanf#
int fsanf(FILE *fp, const char *format, ...)
Read a string into the file.
When read in a blank space or a '\n', it will stop reading.

#NONE#NONE#printf#
Must include <stdio.h> in your code, since printf function needs this library to execute.
printf("Integer %d\n", num);
printf("String %s\n", str);
printf("Char %c\n", char);
printf("Float %f\n", float);
printf("Double %lf\n", double);

#NONE#NONE#getchar#
int getchar(void)
Read in the character from screen and return an integer.
It can only read one character once. 
Press 'Enter' key, the program will execute and only read one character.
Put getchar() in a loop to read multiple characters.

#NONE#NONE#putchar#
int putchar(int c)
Output one character to the screen where c means ASCII code for that character. 

#NONE#NONE#gets#
char *gets(char *s)
Read a line from stdin to the buffer where s points to, until it reaches an end symbol or EOF.

#NONE#NONE#puts#
int puts(const char *s) writes the string which it reads with '\n' to the stdout.

#NONE#NONE#scanf#
When scanf() read in a blank space, it will stop reading.
It might not read a entire sentence.
scanf() is a formatted reading input.
For example:
scanf("%d %d", &a, &b);

#NONE#NONE#calloc#
1) void *calloc(int num, int size);
2) num contiguous spaces of size are dynamically allocated in memory and each byte is initialized to 0.
So the result is that num*size is allocated in bytes of memory, and each byte has a value of 0.

#NONE#NONE#free#
1) void free(void *address);
2) This function frees the block of memory pointed to by the address, release dynamically allocated memory space.

#NONE#NONE#malloc#
1) void *malloc(int num);
2) allocate a specified amount of memory space in the head to store data. 
3) this memory space is not initialized automatically, the initial value is unknown.

#NONE#NONE#realloc#
1) void *realloc(void *address, int new size);
2) this function reallocates memory to new size.

#NONE#NONE#fread#
It reads a given number of bytes from the file, starting at the current position.

#NONE#NONE#fwrite#
It writes a given number of bytes to the file, starting at the current position.

#NONE#NONE#fseek#
int fseek(FILE *stream, long offset, int fromwhere);
It moves the current position in the file to a given number of bytes.
fromwhere can be specified as follows:
SEEK_SET: beginning of the file
SEEK_END: end of the file
SEEK_CUR: current position

#NONE#NONE#ftell#
long int ftell(FILE *stream)
It tells the byte location of current position of cursor in file pointer.

#NONE#NONE#rewind#
void rewind(FILE *stream)
It moves the control to beginning of the file.

#NONE#NONE#perror#
void perror(const char *str)
prints out the appropriate error message for errno, plus any extra message
void perror(const char *str)

#NONE#NONE#feof#
returns true or false if the given file handle is at the end of file or not.

#NONE#NONE#stdargh#
stdarg.h is header file that allows function to accept variable arguments
#NONE#NONE#eof#
It means End of File
#NONE#NONE#goto#
For example:
goto label;
..
.
label: statement;
It's not recommended to use goto syntax.
#NONE#NONE#exit#
exit() causes a program to terminate immediately. This function takes as argument an integer parameter or a symbolic constant like EXIT_SUCCESS or EXIT_FAILURE.
The function is contained in 'stdlib.h'.
#NONE#NONE#atexit#
atexit() registers a function that should be called when the program terminated by reaching the end of main or when exit is invoked. This function takes as an argument a pointer to a function (i.e., the function name).Any function previously registered with atexit() are invoked in the reverse order of their registration. The function called by atexit() cannot have any argument and return value.
The function is contained in 'stdlib.h'.
#NONE#NONE#sigabrt#
Abnormal termination of the program (such as a call to function abort).
#NONE#NONE#sigfpe#
An erroneous arithmetic operation, such as divide-by-zero or and operation resulting in overflow.
#NONE#NONE#sigill#
Detection of illegal instruction.
#NONE#NONE#sigint#
Receipt of an interactive attention signal (<Ctrl> c or <Command> c).
#NONE#NONE#sigsegv#
An attempt to access memory that is not allocated to a program SIGTERM A termination request sent to the program.
#NONE#NONE#define#
Indicates preprocesses before compilation.
#NONE#NONE#strlen#
used to calculate the length of a string, does not contain the null character.
#NONE#NONE#sizeof#
used to calculate the size of the buffer, which is settled when you initialize the variable, so that it will not change.
#NONE#NONE#strcpy#
strcpy(*dest, *src), dest is a pointer point to the address which you want to copy your string to, src is the pointer point to your origin string. 
This function can copy &src to &dest, BUT you need to check whether dest is big enough before use it, or it might cause buffer overflow.
#NONE#NONE#strncpy#
strncpy(*dest, *src, count), if src is shorter than count, then the rest of dest will be filled by null character.
if src is longer than count, then the string in dest will not end up by "\0". 
However, this function will not cause buffer overflow.
#NONE#NONE#strcat#
strcat(*dest, *src), will add the string src to the end of the string dest, and the size of space which dest point to is big enough to hold these two strings.
#NONE#NONE#strcmp#
int strcmp(const char* str1, const char* str2) will compare str1 and str2. 
return 0 if str1==str2;
return negative number if str1<str2
return positive number if str1>str2
#NONE#NONE#strncmp#
int strncmp(const char* str1, const char* str2, int n), will compare str1 and str2, and will compare at most first n elements.
#NONE#NONE#memcpy#
void *memcpy(void *str1, const void *str2, size_t n), will copy n elements in str2 to the address of str1.
#NONE#NONE#typedef#
Creates synonyms (or aliases) for previously defined data types.
eg:typedef struct card Card;
eg:typedef struct{...}Card;
#NONE#NONE#program#
A program can be seen as code + data. 
It contains a list of ingredients (called variables) and a list of directions (called statements) that tell the computer what to do with the variables. 
The variables can represent numeric data, text, or graphical images.
#NONE#NONE#io#
Input/Output (I/O) describes any operation, program, or device that transfers data to or from a computer. Typical I/O devices are printers, hard disks, keyboards, and mouses.
#NONE#NONE#language#
A way of explaining to the computer what we want it to do.
Allows us to express our needs at a level that is easy for us (humans) to understand.
Different programming languages are designed to make different things easy to express.
#NONE#NONE#type#
Types describe what a value is. Some type systems are more than others.
Some languages require you to give the type, others try to work it out automatically.
#NONE#NONE#iteration#
Iteration applies loop or iterator. It stops when condition fails, such like while, for loop.
#NONE#NONE#recursion#
Generally, function applies recursion idea, which means a function calls itself and terminates under base case.
#NONE#NONE#x2go#
This is what UNNC students use to edit, compile, and execute C programs in Linux environment.
#NONE#NONE#data#
Data is stored in the form of variable.
#NONE#NONE#sequence#
Simply, this means one line at a time going down the program. Instructions are executed one after another.
#NONE#NONE#block#
{ } define the start and end of a block.
1)A variable declared in a block is only inside that block.
2) Each function defines a new block.
3) Most instruction statements define new blocks.
4) You can start a new block almost anywhere you can have an individual instruction.
#NONE#NONE#ceil#
ceil() rounds up the given number. It returns the integer value which is greater than or equal to given number.
For example, ceil(2.5) is 3
#NONE#NONE#floor#
floor() rounds down the given number. It returns the integer value which is less than or equal to given number.
For example, floor(2.5) is 2
#NONE#NONE#sqrt#
sqrt() returns the square root of given number.
For example, sqrt(4) is 2
#NONE#NONE#pow#
pow() returns the power of given number.
For example, pow(2,3) is 8
#NONE#NONE#abs#
abs() returns the absolute value of given number.
For example, abs(-2) is 2
#NONE#NONE#char#
A character in the ASCII set is represented by an integer between 0 and 255.
Null character is a special character, denoted as '\0'.
Try following example code:
char ch = ‘A’;
printf(“Char = %c and its ASCII code is %d\n”, ch, ch);
#NONE#NONE#ascii#
For more detail of ASCII code, you may refer to this web page:
http://www.asciitable.com/
#NONE#NONE#memory#
You may want to ask some questions on Heap or malloc()?
#NONE#NONE#heap#
1) The segment where dynamic memory allocation usually takes place.
2) Memory doesn’t get deallocated at the end of a function call.
3) Manage by the programmer using e.g. malloc() and free()
#NONE#NONE#void#
1. if a function returns nothing, the return type is void
2. if a function has no argument list, the argument list is void
#NONE#NONE#comment#
1. single-line comment
 // comment...
2. multi-line comment
/*
comment
*/
#NONE#NONE#library#
Generally, it means function library where exists many common pre-defined function
Example libraries in C: 
math.h 
stdio.h
#NONE#NONE#c#
C is a statically typed, structured, general purpose computer programming language which has formed the basis for many other programming languages.
To run a C program, you may use command after compile: ./a.out
#NONE#NONE#keyword#
Keywords in C:
auto, double, int, struct, break, else, long, switch,
case, enum, register, typedef, char, extern, return,
union, const, float, short, unsigned, continue, for,
static, void, default, goto, sizeof, volatile, do,
if, signed, while
#NONE#NONE#mathh#
Some common mathematical functions are declared in the math.h header file.
For example, pow() and abs()
#NONE#NONE#stdlibh#
stdlib.h declares standard OS related function, such as macro, malloc()
#NONE#NONE#stdioh#
stdio.h declares standard I/O function, such as scanf() and printf()
#NONE#NONE#marco#
A macro is an abstraction that replaces certain text patterns with a set of predefined rules. 
The compiler will automatically replace it when encoutering the macro.
#NONE#NONE#cast#
Convert the type of an expression to another type.
For example,
float a = 2.34;
int b = (int)(a+2);
#NONE#NONE#warning#
Warning will not stop you from compiling.
But best make sure to not have warnings in your programs!
#NONE#NONE#bubble#
for (i = 0; i < n-1; ++ i) {
for (j = 0; j < n-1; ++ j) {
		if (array[j] > array[j+1]) {
			temp = array[j];
			array[j] = array[j+1];
			array[j+1] = temp;
		}
	}
}
#NONE#NONE#linear#
A sequential search, every item is checked until the end of the data collection or the item is found.
#NONE#NONE#segmentation#
Segmentation fault means the memory accessed exceeds the space allocated by system
#NONE#NONE#null#
NULL is an empty pointer which points to nothing.
NULL is usually used to initialize a pointer.
For example,
int *p = NULL;
#NONE#NONE#precedence#
Copy and jump to following web page for more detail:
https://en.cppreference.com/w/c/language/operator_precedence
